Modelando o domínio:
	Técnica de narrativa:
		- Descreve a solução, do ponto de vista mais fiel do usuário. (O que ele quer fazer no sistema?)
		- Analisar os substantivos empregados na descrição,  possivelmente irá se ornar uma entidade;
		- Verbos utilizados serão possíveis candidatos a se tornar funcionaldades ou métodos;
============================================================================================
Protocolos HTTP:
	- Status que começam com 2 são status de sucesso (requisição)
============================================================================================		
O que é uma API Rest?
	- Representation State Transfer, é um padrã de comunicação entre sistemas.
============================================================================================	
Introdução ao ASP.NET Core
	- Framework open-source, multiplataforma.
	
	Solução é como se fosse o "container" porque ele terá multi camadas

	Como criar um projeto via linha de comando:
		- dotnet new --help (comandos)
		- dotnet new sln --name "Nome da solucao"
		- dotnet new 'tipo do projeto' --name "Nome do projeto" --output "caminho aonde vai salvar"
		- dotnet sln add "caminho do projeto" - Isso pra linkar a solução com o projeto;
		- dotnet build
		- dotnet restore 'restaurar os pacotes'
		- dotnet run
============================================================================================
Controllers:
	- São componentes que definem e agrupam um conjunti de ações, agrupam
	ações de maneira logica, baseada no recurso a ser tradado e/ou acessado.
	- Retorno do IActionResult é geralmente o mais usado pois ele implementa
	respostas padrão do HTTP;

============================================================================================

Configurações:
	- IConfiguration, esta interface permite fazer configurações de várias fontes
	para a aplicação, como por exemplo: variáveis de ambiente, Azure Key Vault,
	arquivos de configuração, entre outros.
	
============================================================================================
Injeção de Dependencia:
	- Está é uma técnica que permite a inserção de um objeto em outro, criando uma
	relação de dependência.
	- No .NET podemos colocar 3 tipos de ciclo de vida:
		- Singleton: uma instância por aplicação inteira;
		- Scoped: uma instância por requisição;
		- Transient: uma instância por classe;
============================================================================================
O que é uma arquitetura?
	- Organização fundamental do sistema, incluindo os componentes, relacionamento entre eles,
	o ambiente, os principios. (Não existe arquitetura errada).
	- Existem dois tipos de arquiteturas mais conhecidas:
		- Arquitetura Distribuidas: componentes do sistema que estão sendo execuadas
		em outros processos, geralmente em outros servidores;
		- Monolítica: componentes do sistema executam no mesmo processo, na mesma máquina;
		- Se o assembly é criado no mesmo projeto, é monolítico;
	- Arquitetura limpa tem o foco no domínio (DDD) e é dividida em 4 camadas:
		- Core
		- Infrastructure
		- Application
		- API/Interface
	
	- Camada Core(Domain):
		- Cama mais importante. Aqui é onde o foco  de desenvolvimento inicial deve estar.
		- Conceitos do DDD que a camada Core irá utilizar:
			- Agregados: padrão que representa um conjunto de objetos do domínio
			que podem ser tratador como um só;
			- Repositórios: abstrações que representam acesso a objetos de domínio;
			- Linguagem Ubíqua: modelo de linguagem universal para comunicação entre
			desenvolvedores e analistas de negócios;
			
		- Componentes:
			- Entidades;
			- Enums;
			- Data Access Objects (DTO)
			- Serviços de camadas de domínio: quando uma operação do dominio envolve
			múltiplas classes ou estados, extrapolando responsabilidades, um serviço de cada
			domínio é indicado. (Logica de negocio usa mais de uma classe)
			- Interfaces (de serviços da infra-estrutura, domínio, repositórios): utilizadas
			em diferentes camadas, como API, Aplicação e Infraestrutura;
			- Exceções de domínio: exceções específicas a cenários de problema no fluxo de negócio.
	
	- Camada Infrastructure
		- Camada responsável por código de infraestrutura, como acesso a dados, conexão com serviços
		de computação na nuvem, integração entre sistema, entre outros;
		- Cada um desses sub0itens pode ser dividido em projetos próprios, como Persistence, Integration e
		CloudService.
		
		- Componentes:
			- Acesso ao dados: classe responsáveis pelo acesso a dados.
			- Serviços de infraestrutura: classe responsáveis por acecsso a recursos na nuvem,
			integração com outros sistema, APIs de consulta...
	
	- Camada Application
		- Camada responsável por código de aplicação, onde as funcionalidades expostas vão estar,
		em forma de serviços. (Modelos de entrada de saída ficam dentro desta camada)
		- Também contém os modelos de entreda e saída da aplicação, que serão utilizados diretamente
		na API (seja no retorno da API ou no corpo da requisição);
		
		- Componentes
			- Serviços: classes responsáveis pelas funcionalidades expostas, geralmente sendo criado
			um por cada entidade.
			- Modelos de entrada e saída: classes, que podem ser consideradas DTOs, responsáveis por definir
			propriedades de objetos de entrada e saida, endpoints/funcionalidades;
	
============================================================================================
Inversão de Dependencia e Interfaces:
	- Refere ao SOLI(D):
		- Módulos de alto nível não devem depender de módulos de baixo nível.
		Ambos devem depender de abstrações;
		- Abstrações não devem depender de detalhes. Detalhes devem depender
		de abstrações;
		- Baixo nível = classes concretas;
		- Para resolver o problema, as classes devem depender de interface, 
		que são abstrações que representam contratos.
		
	-
		